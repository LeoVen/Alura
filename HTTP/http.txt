/* 
 * Doctype         : Info
 * Created by      : Leonardo Vencovsky
 * Together with   : niemand / ninguém / nadie / nobody ~~~~~~
 * Date            : 21/01/2018
 * Last modified   : 21/01/2018
 * Editor          : Sublime Text 3
 * Inspiration     : Alura [www.alura.com.br]  HTTP: Entendendo a web por baixo dos panos
 * Language        : Portuguese
 *
 * Anotações do curso HTTP
 *
*/

HTTP, HTTPS e HTTP2

< < < HTTP - Hypertext Transfer Protocol

        ╔════════╗                  ╔════════╗
        ║        ║    Protocols     ║        ║  SQL   █▀▀▀▀█
        ║ Client ║ <--------------> ║ Server ║ <----> █▄▄▄▄█
        ║        ║                  ║        ║        █▄▄▄▄█
        ╚════════╝                  ╚════════╝       Database
User's PCs or other servers

Assim como outros protocolos:
FTP, SMTP, SMB

O HTTP envia texto puro via interntet (TCP).
Por questões de segurança existe o HTTPS (Safe) que envia essas informações criptografadas.
A criptografia se da por meio de SSL/TSL (Secure Sockets Layer & Transport Layer Security).
O SSL é o predecessor do TSL.

Identidade : Certificado Digital
	É certificado por uma entidade confiável que o site está enviando informações criptografadas.

< < < Tipos de Criptografia

< < Assimétrica :
	- Diferentes Chaves
	- Mais seguro
	- Mais lento

< < Simétrica :
	- Mesmas chaves
	- Mais rápida
	- Menos seguro


        ╔════════╗                  ╔════════╗
        ║        ║       HTTPS      ║        ║
        ║ Client ║ <--------------> ║ Server ║
        ║        ║                  ║        ║
        ╚════════╝                  ╚════════╝
      Chave pública               Chave Privada
           🔑 ------------------------ 🔑
   Criptografa os dados        É a única que consegue
    saindo da máquina       descriptografar a menssagem

O HTTPS usa os dois métodos

< < < DNS : Domain Name System

             ╔════════╗                  ╔════════╗
             ║        ║  172.217.29.131  ║        ║
             ║ Client ║ ---------------> ║ Server ║
             ║        ║                  ║        ║
             ╚════════╝                  ╚════════╝
                │  │receives            Google Server
           sends│  │172.217.29.131
   google.com.br│  │
           ╔════════════╗
           ║ DNS Server ║
           ╚════════════╝

www.mail.google.com.br
Top level domain:
	- br
Subdomains:
	- com (comercial)
	- google
	- mail
	- www (legacy)

www pode ser omitido

< < < Portas

Portas padrões:
	- HTTP: 80
	- HTTPS: 443
	- FTP: 20
	- SSH: 22

< < < URL: Uniform Resource Locator

Padrão:

protocolo://subdomínio.domínio:porta/caminho/recurso

https://www.youtube.com:443/feed/subscriptions

HTTP é Stateless. Ou seja, não guarda o estado dos pedidos anteriores.
Cada pedido é individual e completo por si só.

╔════════╗   HTTP Request   ╔════════╗
║        ║ ---------------> ║        ║
║ Client ║                  ║ Server ║
║        ║ <--------------- ║        ║
╚════════╝   HTTP Response  ╚════════╝

HTTP Status Codes :

100 - Info
200 - Success
300 - Redirecionamento
400 - Erro do lado client
500 - Erro do lado server

Voltando para  URLs...

https://www.youtube.com/results?search-query=bolinhos

O ? na URL significa uma query e em seguida seus parâmetros.
Neste caso:

search-query = bolinhos

Quando temos mais de um parâmetro, estes são separados por & :

https://www.youtube.com/results?q=bolinhos&sp=CAE%253

q = bolinhos
sp = CAE%253



Até agora vimos o método GET.

O método POST :
  - Envio de resultados
  - Não aparecem na URL
  - Casos de formulários onde as informações precisam ser protegidas

Mas e GET?
A vantagem de GET é que tendo a URL é possível realizar o mesmo processo por outras
pessoas que possuam a mesma URL. Por exemplo fizemos uma busca no google e queremos
que outras pessoas vejam os mesmos resultados que nós.

