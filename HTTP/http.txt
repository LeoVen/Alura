/* 
 *
 * Anotações do curso HTTP
 *
*/

HTTP, HTTPS e HTTP2

< < < HTTP - Hypertext Transfer Protocol

        ╔════════╗                  ╔════════╗
        ║        ║    Protocols     ║        ║  SQL   █▀▀▀▀█
        ║ Client ║ <--------------> ║ Server ║ <----> █▄▄▄▄█
        ║        ║                  ║        ║        █▄▄▄▄█
        ╚════════╝                  ╚════════╝       Database
User's PCs or other servers

Assim como outros protocolos:
FTP, SMTP, SMB

O HTTP envia texto puro via interntet (TCP).
Por questões de segurança existe o HTTPS (Safe) que envia essas informações criptografadas.
A criptografia se da por meio de SSL/TSL (Secure Sockets Layer & Transport Layer Security).
O SSL é o predecessor do TSL.

Identidade : Certificado Digital
	É certificado por uma entidade confiável que o site está enviando informações criptografadas.

< < < Tipos de Criptografia

< < Assimétrica :
	- Diferentes Chaves
	- Mais seguro
	- Mais lento

< < Simétrica :
	- Mesmas chaves
	- Mais rápida
	- Menos seguro


        ╔════════╗                  ╔════════╗
        ║        ║       HTTPS      ║        ║
        ║ Client ║ <--------------> ║ Server ║
        ║        ║                  ║        ║
        ╚════════╝                  ╚════════╝
      Chave pública               Chave Privada
           🔑 ------------------------ 🔑
   Criptografa os dados        É a única que consegue
    saindo da máquina       descriptografar a menssagem

O HTTPS usa os dois métodos

< < < DNS : Domain Name System

             ╔════════╗                  ╔════════╗
             ║        ║  172.217.29.131  ║        ║
             ║ Client ║ ---------------> ║ Server ║
             ║        ║                  ║        ║
             ╚════════╝                  ╚════════╝
                │  │receives            Google Server
           sends│  │172.217.29.131
   google.com.br│  │
           ╔════════════╗
           ║ DNS Server ║
           ╚════════════╝

www.mail.google.com.br
Top level domain:
	- br
Subdomains:
	- com (comercial)
	- google
	- mail
	- www (legacy)

www pode ser omitido

< < < Portas

Portas padrões:
	- HTTP: 80
	- HTTPS: 443
	- FTP: 20
	- SSH: 22

< < < URL: Uniform Resource Locator

Padrão:

protocolo://subdomínio.domínio:porta/caminho/recurso

https://www.youtube.com:443/feed/subscriptions

HTTP é Stateless. Ou seja, não guarda o estado dos pedidos anteriores.
Cada pedido é individual e completo por si só.

╔════════╗   HTTP Request   ╔════════╗
║        ║ ---------------> ║        ║
║ Client ║                  ║ Server ║
║        ║ <--------------- ║        ║
╚════════╝   HTTP Response  ╚════════╝

HTTP Status Codes :

100 - Info
200 - Success
300 - Redirecionamento
400 - Erro do lado client
500 - Erro do lado server

Voltando para  URLs...

https://www.youtube.com/results?search-query=bolinhos

O ? na URL significa uma query e em seguida seus parâmetros.
Neste caso:

search-query = bolinhos

Quando temos mais de um parâmetro, estes são separados por & :

https://www.youtube.com/results?q=bolinhos&sp=CAE%253

q = bolinhos
sp = CAE%253



Até agora vimos o método GET.

O método POST :
  - Envio de resultados
  - Não aparecem na URL
  - Casos de formulários onde as informações precisam ser protegidas

Mas e GET?
A vantagem de GET é que tendo a URL é possível realizar o mesmo processo por outras
pessoas que possuam a mesma URL. Por exemplo fizemos uma busca no google e queremos
que outras pessoas vejam os mesmos resultados que nós.

GET: Receber dados      DELETE: Remover um recurso
POST: Enviar dados      PUT: Atualizar um recurso
Outros:
HEAD,  OPTIONS, CONNECT, etc

WebServices

Comunicação por XML ou JSON. Ao fazer GET dessas informações tudo passará por um parsing que
pegará as informações relevantes de acordo com uma especificação (WSDL ou WADL).

Via cabeçalho HTTP especificamos como queremos receber as informações (XML ou JSON).
Accept: text/html
Accept: text/css .. Accept: */*

Arquitetura REST

                       Recurso
                        (URI)
                          ^
                         / \
                        /   \
                       /     \
                      /       \
                     /         \
                    /___________\
                   / \   / \   / \
                  /   \ /___\ /   \
                 /     \     /     \
                /       \   /       \
               /         \ /         \
   Operações  /___________v___________\  Representação
 (GET, POST, PUT...)                  (JSON, XML, HTML...)

No cabeçalho: tipo/subtipo

Tipos: text/image/application/audio/video
       text: text/plain, text/css, text/html, text/javascript ...
       image: image/gif, image/png, image/jpeg ...
       audio:
São chamados de MIME Type (Multipurpose Internet Mail Extensions)


        HTTP2

HTTP2: Não envia mais texto puro. As informações são enviadas de forma binária.
       Por padrão os dados são criptografados (TLS).
GZIP: Algoritmo de zipar o conteúdo enviado. Diminui a quantidade de bytes trafegando.
HPACK: Compressão dos dados do cabeçalho.

        Binário > Zipar > Criptografar

No HTTP2 não é mais preciso enviar os mesmos headers quando eles são os mesmos em diferentes
solicitações. Isso se chama Headers Stateful.

Server Push :

                           ╔════════╗   HTTP Request   ╔════════╗
                           ║        ║ ---------------> ║        ║
                           ║ Client ║                  ║ Server ║
                           ║        ║ <--------------- ║        ║
                           ╚════════╝   HTTP Response  ╚════════╝
                               |                           |            HTTTP 1.1
                    index.html | ------------------------> | _
                               |                           |  | Há uma certa demora
                               |                           |  |
                               | <------------------------ | _|
                               |                           |
           próximoRecurso.html | ------------------------> | _
                               |                           |  | Cada recurso é enviadoo um por um
                               | <------------------------ | _|
                               |                           |
                               |                           |            HTTP 2
                               |                           |
                               |                           |      Já com Server Push é diferente.
                    estilo.css | ------------------------> |      Os recursos são enviados e
                     jquery.js | ------------------------> |      recebidos a todo momento.
                               | ------------------------> |
                               | <------jquery.js--------- |
                       main.js | ------------------------> |      Assim que index.html é carregado
                               | <------estilo.css-------- |      é enviado um request a todos seus
                      logo.png | ------------------------> |      recursos com antecedência, 
                               | <------logo.png---------- |      agilizando o processo e deixando
                   imagem.jpeg | ------------------------> |      de fazer um requeste a cada
                               | <------main.js----------- |      recurso.
                               |                           |
                               |                           |


Multiplexing : Requisições e respostas são paralelas.

Keep ALive: Com a mesma conexão TCP é possível enviar várias requisições HTTP em paralelo (HTTP2).

TCP (Transmission Control Protocol) :

           ╔══════╦═════╦══════╦═════╦═════════╗
           ║ HTTP ║ FTP ║ SMTP ║ SMB ║ etc ... ║ - Protocolos
           ╠══════╩═════╩══════╩═════╩═════════╣
           ║                 TCP               ║
           ╚═══════════════════════════════════╝
